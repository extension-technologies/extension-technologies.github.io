"use strict";(self.webpackChunkextention_technologies_docs=self.webpackChunkextention_technologies_docs||[]).push([[5205],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),u=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),h=a,m=p["".concat(l,".").concat(h)]||p[h]||d[h]||s;return n?o.createElement(m,r(r({ref:t},c),{},{components:n})):o.createElement(m,r({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,r=new Array(s);r[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,r[1]=i;for(var u=2;u<s;u++)r[u]=n[u];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2977:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return p}});var o=n(7462),a=n(3366),s=(n(7294),n(3905)),r=["components"],i={},l=void 0,u={unversionedId:"tech-stack/mongodb/setup article",id:"tech-stack/mongodb/setup article",isDocsHomePage:!1,title:"setup article",description:"How to Install and Secure MongoDB on Ubuntu 16.04",source:"@site/docs/tech-stack/mongodb/setup article.md",sourceDirName:"tech-stack/mongodb",slug:"/tech-stack/mongodb/setup article",permalink:"/docs/tech-stack/mongodb/setup article",editUrl:"https://github.com/extension-technologies/extension-technologies.github.io/docs/tech-stack/mongodb/setup article.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"commands",permalink:"/docs/tech-stack/mongodb/commands"},next:{title:"load-testing-erp",permalink:"/docs/tech-stack/mysqltuner/load-testing-erp"}},c=[],d={toc:c};function p(e){var t=e.components,n=(0,a.Z)(e,r);return(0,s.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"How to Install and Secure MongoDB on Ubuntu 16.04\nMongoDBSecurity\nMelissaAnderson\nBy Melissa Anderson"),(0,s.kt)("p",null,"Published onFebruary 24, 2017 254.5kviews\nIntroduction\nMongoDB is a document-oriented database that is free and open-source. It is classified as a NoSQL database because it does not rely on a traditional table-based relational database structure. Instead, it uses JSON-like documents with dynamic schemas. Unlike relational databases, MongoDB does not require a predefined schema before you add data to a database. You can alter the schema at any time and as often as is necessary without having to setup a new database with an updated schema."),(0,s.kt)("p",null,"In Part One of this tutorial we\u2019ll use the MongoDB Repository to install the latest version of MongoDB. In Part Two, we\u2019ll enable authentication to secure it on the local system. Finally, in Part Three, we\u2019ll show how to more securely allow remote connections if they\u2019re needed."),(0,s.kt)("p",null,"Prerequisites\nTo follow this tutorial, you will need:"),(0,s.kt)("p",null,"One Ubuntu 16.04 server configured with a non-root sudo user and a firewall by following the Ubuntu 16.04 initial server setup guide.\nWhen this is in place, you\u2019re ready to follow along."),(0,s.kt)("p",null,"Part One: Setting Up the Server\nStep 1 \u2014 Adding the MongoDB Repository\nMongoDB is already included in Ubuntu package repositories, but the official MongoDB repository provides the most up-to-date version and is the recommended way of installing the software. In this step, we will add this official repository to our server."),(0,s.kt)("p",null,"Ubuntu ensures the authenticity of software packages by verifying that they are signed with GPG keys, so we first have to import the key for the official MongoDB repository."),(0,s.kt)("p",null,"sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6"),(0,s.kt)("p",null,"The following output confirms that we\u2019ve successfully imported the key:"),(0,s.kt)("p",null,'Output\nExecuting: /tmp/tmp.IdwenTia0s/gpg.1.sh --keyserver\nhkp://keyserver.ubuntu.com:80\n--recv\n0C49F3730359A14518585931BC711F9BA15703C6\ngpg: requesting key A15703C6 from hkp server keyserver.ubuntu.com\ngpg: key A15703C6: public key "MongoDB 3.4 Release Signing Key ',(0,s.kt)("a",{parentName:"p",href:"mailto:packaging@mongodb.com"},"packaging@mongodb.com"),'" imported\ngpg: Total number processed: 1\ngpg:               imported: 1  (RSA: 1)'),(0,s.kt)("p",null,"Next, we\u2019ll add MongoDB repository details so apt will know where to download the packages. Issue the following command to create a list file for MongoDB."),(0,s.kt)("p",null,'echo "deb ',"[ arch=amd64,arm64 ]"," ",(0,s.kt)("a",{parentName:"p",href:"http://repo.mongodb.org/apt/ubuntu"},"http://repo.mongodb.org/apt/ubuntu"),' xenial/mongodb-org/3.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list'),(0,s.kt)("p",null,"Finally, we\u2019ll update the packages list."),(0,s.kt)("p",null,"sudo apt-get update"),(0,s.kt)("p",null,"Now we\u2019re ready to install MongoDB."),(0,s.kt)("p",null,"Step 2 \u2014 Installing MongoDB\nWe\u2019ll install themongodb-org meta-package, which includes the daemon, configuration and init scripts, shell, and management tools on the server."),(0,s.kt)("p",null,"sudo apt-get install mongodb-org"),(0,s.kt)("p",null,"Press enter or type Y to proceed when prompted. Once the installation is complete, we\u2019ll start the Mongo daemon:"),(0,s.kt)("p",null,"sudo systemctl start mongod"),(0,s.kt)("p",null,"Since systemctl doesn\u2019t provide output, we\u2019ll check the status to verify that the service has started properly."),(0,s.kt)("p",null,"sudo systemctl status mongod"),(0,s.kt)("p",null,"Output\n\u25cf mongod.service - High-performance, schema-free document-oriented database\nLoaded: loaded (/lib/systemd/system/mongod.service; disabled; vendor preset: enabled)\nActive: active (running) since Fri 2017-02-17 18:57:26 UTC; 17min ago\nDocs: ",(0,s.kt)("a",{parentName:"p",href:"https://docs.mongodb.org/manual"},"https://docs.mongodb.org/manual"),"\nMain PID: 2811 (mongod)\nTasks: 17\nMemory: 56.8M\nCPU: 7.294s\nCGroup: /system.slice/mongod.service\n\u2514\u25002811 /usr/bin/mongod --quiet --config /etc/mongod.conf"),(0,s.kt)("p",null,"Press q to exit. Now that we\u2019ve manually started the daemon and verified that it\u2019s running, we\u2019ll ensure that it restarts automatically at boot:"),(0,s.kt)("p",null,"sudo systemctl enable mongod"),(0,s.kt)("p",null,"The following output confirms that the command was successful:"),(0,s.kt)("p",null,"Output\nCreated symlink from /etc/systemd/system/multi-user.target.wants/mongod.service\nto /lib/systemd/system/mongod.service.\nNext, we\u2019ll take essential steps to secure our databases."),(0,s.kt)("p",null,"Part Two: Securing MongoDB\nEarlier versions of MongoDB were vulnerable to automated exploits because by default no authentication was required to interact with the database. Any user could create and destroy databases, as well as read from and write to their contents by default. This was compounded because those earlier versions also configured the MongoDB daemon to listen on all interfaces by default, which meant that automated scripts could detect MongoDB instances that weren\u2019t protected by a firewall and, if authentication hadn\u2019t been enabled, gain complete access to MongoDB."),(0,s.kt)("p",null,"The situation has been mitigated in the 3.x release as well as earlier versions provided by some package managers because the daemon is now bound to 127.0.0.1 so it will only accept connections on the Unix socket. It is not automatically open to the Internet."),(0,s.kt)("p",null,"However, authentication is still disabled by default, so any users on the local system have complete access to the databases. To secure this we\u2019ll create an administrative user, enable authentication and test."),(0,s.kt)("p",null,"Step 1 \u2014 Adding an Administrative User\nTo add our user, we\u2019ll connect to the Mongo shell:"),(0,s.kt)("p",null,"mongo"),(0,s.kt)("p",null,"The output when we use the Mongo shell warns us that access control is not enabled for the database and that read/write access to data and configuration is unrestricted."),(0,s.kt)("p",null,'Output\nMongoDB shell version v3.4.2\nconnecting to: mongodb://127.0.0.1:27017\nMongoDB server version: 3.4.2\nWelcome to the MongoDB shell.\nFor interactive help, type "help".\nFor more comprehensive documentation, see\n',(0,s.kt)("a",{parentName:"p",href:"http://docs.mongodb.org/"},"http://docs.mongodb.org/"),"\nQuestions? Try the support group\n",(0,s.kt)("a",{parentName:"p",href:"http://groups.google.com/group/mongodb-user"},"http://groups.google.com/group/mongodb-user"),"\nServer has startup warnings:\n2017-02-21T19:10:42.446+0000 I STORAGE  ","[initandlisten]","\n2017-02-21T19:10:42.446+0000 I STORAGE  ","[initandlisten]"," ",(0,s.kt)("strong",{parentName:"p"}," WARNING: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine\n2017-02-21T19:10:42.446+0000 I STORAGE  ","[initandlisten]"," "),"          See ",(0,s.kt)("a",{parentName:"p",href:"http://dochub.mongodb.org/core/prodnotes-filesystem"},"http://dochub.mongodb.org/core/prodnotes-filesystem"),"\n2017-02-21T19:10:42.534+0000 I CONTROL  ","[initandlisten]","\n2017-02-21T19:10:42.534+0000 I CONTROL  ","[initandlisten]"," ",(0,s.kt)("strong",{parentName:"p"}," WARNING: Access control is not enabled for the database.\n2017-02-21T19:10:42.534+0000 I CONTROL  ","[initandlisten]"," "),"          Read and write access to data and configuration is unrestricted.\n2017-02-21T19:10:42.534+0000 I CONTROL  ","[initandlisten]"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"We\u2019re free to choose the name for the administrative user since the privilege level comes from the assignment of the role userAdminAnyDatabase. The database, admin designates where the credentials are stored. You can learn more about authentication in the MongoDB Security Authentication section.")),(0,s.kt)("p",null,"Set the username of your choice and be sure to pick your own secure password and substitute them in the command below:"),(0,s.kt)("p",null,'use admin\ndb.createUser(\n{\nuser: "AdminSammy",\npwd: "AdminSammy\'sSecurePassword",\nroles: ','[ { role: "userAdminAnyDatabase", db: "admin" } ]',"\n}\n)"),(0,s.kt)("p",null,"When we issue the db.createUser command, the shell will prepend three dots before each line until the command is complete. After that, we should receive feedback like the following when the user has been added."),(0,s.kt)("p",null,"Output"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},'use admin\nswitched to db admin\ndb.createUser(\n...   {\n...     user: "AdminSammy",\n...     pwd: "AdminSammy\'sSecurePassword",\n...     roles: ','[ { role: "userAdminAnyDatabase", db: "admin" } ]','\n...   }\n... )\nSuccessfully added user: {\n"user" : "AdminSammy",\n"roles" : ','[\n{\n"role" : "userAdminAnyDatabase",\n"db" : "admin"\n}\n]',"\n}")),(0,s.kt)("p",null,"Type \u2018exit\u2019 and press ENTER or use CTRL+C to leave the client."),(0,s.kt)("p",null,"At this point, our user will be allowed to enter credentials, but they will not be required to do so until we enable authentication and restart the MongoDB daemon."),(0,s.kt)("p",null,"Step 2 \u2014 Enabling Authentication\nAuthentication is enabled in the mongod.conf file. Once we enable it and restart mongod, users still will be able to connect to Mongo without authenticating, but they will be required to provide a username and password before they can interact."),(0,s.kt)("p",null,"Let\u2019s open the configuration file:"),(0,s.kt)("p",null,"sudo nano /etc/mongod.conf"),(0,s.kt)("p",null,"In the #security section, we\u2019ll remove the hash in front of security to enable the stanza. Then we\u2019ll add the authorization setting. When we\u2019re done, the lines should look like the excerpt below:"),(0,s.kt)("p",null,'mongodb.conf\n. . .\nsecurity:\nauthorization: "enabled"\n. . .'),(0,s.kt)("p",null,"Note that the \u201csecurity\u201d line has no spaces at the beginning, and the \u201cauthorization\u201d line must be indented with two spaces"),(0,s.kt)("p",null,"Once we\u2019ve saved and exited the file, we\u2019ll restart the daemon:"),(0,s.kt)("p",null,"sudo systemctl restart mongod"),(0,s.kt)("p",null,"If we\u2019ve made an error in the configuration, the dameon won\u2019t start. Since systemctl doesn\u2019t provide output, we\u2019ll use its status option to be sure that it did:."),(0,s.kt)("p",null,"sudo systemctl status mongod"),(0,s.kt)("p",null,"If we see Active: active (running) in the output and it ends with something like the text below, we can be sure the restart command was successful:"),(0,s.kt)("p",null,"Output\nJan 23 19:15:42 MongoHost systemd","[1]",": Started High-performance, schema-free document-oriented database.\nHaving verified the daemon is up, let\u2019s test authentication."),(0,s.kt)("p",null,"Step 3 \u2014 Verifying that Unauthenticated Users are Restricted\nFirst, let\u2019s connect without credentials to verify that our actions are restricted:"),(0,s.kt)("p",null,"mongo"),(0,s.kt)("p",null,"Now that we\u2019ve enabled authentication, all of the earlier warnings are resolved."),(0,s.kt)("p",null,"Output\nMongoDB shell version v3.4.2\nconnecting to: mongodb://127.0.0.1:27017\nMongoDB server version: 3.4.2\nWe\u2019re connected to the test database. We\u2019ll test that our access is restricted with the show dbs command:"),(0,s.kt)("p",null,"show dbs"),(0,s.kt)("p",null,"Output\n2017-02-21T19:20:42.919+0000 E QUERY    ","[thread1]",' Error: listDatabases failed:{\n"ok" : 0,\n"errmsg" : "not authorized on admin to execute command { listDatabases: 1.0 }",\n"code" : 13,\n"codeName" : "Unauthorized"\n. . .\nWe wouldn\u2019t be able to create users or similarily privileged tasks without authenticating.'),(0,s.kt)("p",null,"Let\u2019s exit the shell to proceed:"),(0,s.kt)("p",null,"exit"),(0,s.kt)("p",null,"Next, we\u2019ll make sure our Administrative user does have access."),(0,s.kt)("p",null,"Step 4 \u2014 Verifying the Administrative User\u2019s Access\nWe\u2019ll connect as our administrator with the -u option to supply a username and -p to be prompted for a password. We will also need to supply the database where we stored the user\u2019s authentication credentials with the --authenticationDatabase option."),(0,s.kt)("p",null,"mongo -u AdminSammy -p --authenticationDatabase admin"),(0,s.kt)("p",null,"We\u2019ll be prompted for the password, so supply it. Once we enter the correct password, we\u2019ll be dropped into the shell, where we can issue the show dbs command:"),(0,s.kt)("p",null,"Output\nMongoDB shell version v3.4.2\nEnter password:\nconnecting to: mongodb://127.0.0.1:27017\nMongoDB server version: 3.4.2"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Rather than being denied access, we should see the available databases:")),(0,s.kt)("p",null,"show dbs"),(0,s.kt)("p",null,"Output\nadmin  0.000GB\nlocal  0.000GB\nType exit or press CTRL+C to exit."),(0,s.kt)("p",null,"See the MongoDB documentation to learn more about Authentication, Role-Based Access Control, and Users and Roles."),(0,s.kt)("p",null,"Part Three: Configuring Remote Access (Optional)\nBefore we start working with an installation that allows remote connections, ideally we\u2019ll have MongoDB behind an external firewall, protected by a virtual private network (VPN), or restricted through a bastion host. As we work toward that, however, we can take the somewhat less-complicated step of enabling a firewall on the database server and restricting access to the specific host or hosts that need it."),(0,s.kt)("p",null,"Step 1 \u2014 Enabling UFW\nIn the Initial Server Setup with Ubuntu 16.04 prerequisite, we enabled UFW and allowed only SSH connections. Before we open a port for our client machine, let\u2019s verify UFW\u2019s status:"),(0,s.kt)("p",null,"sudo ufw status"),(0,s.kt)("p",null,"Note: If the output indicates that the firewall is inactive, activate it with:"),(0,s.kt)("p",null,"sudo ufw enable"),(0,s.kt)("p",null,"Once it\u2019s enabled, rerunning the status command, sudo ufw status will show the rules. If necessary, be sure to allow SSH."),(0,s.kt)("p",null,"sudo ufw allow OpenSSH"),(0,s.kt)("p",null,"Unless we made changes to the prerequisites, the output should show that only OpenSSH is allowed:"),(0,s.kt)("p",null,"Output\nStatus: active"),(0,s.kt)("p",null,"To                         Action      From"),(0,s.kt)("hr",null),(0,s.kt)("p",null,"OpenSSH                    ALLOW       Anywhere\nOpenSSH (v6)               ALLOW       Anywhere (v6)\nNext, we\u2019ll allow access to the default MongoDB port, 27017, but restrict that access to a specific host. If you\u2019ve changed the default port, be sure to update it in the command below."),(0,s.kt)("p",null,"sudo ufw allow from client_ip_address to any port 27017"),(0,s.kt)("p",null,"Re-run this command using the IP address for each additional client that needs access. To double-check the rule, we\u2019ll run ufw status again:"),(0,s.kt)("p",null,"sudo ufw status"),(0,s.kt)("p",null,"Output\nTo                         Action      From"),(0,s.kt)("hr",null),(0,s.kt)("p",null,"OpenSSH                    ALLOW       Anywhere\n27017                       ALLOW      client_ip_address\nOpenSSH (v6)               ALLOW       Anywhere (v6)\nNote: If you\u2019re new to UFW, you can learn more in the guide, UFW Essentials: Common Firewall Rules and Commands."),(0,s.kt)("p",null,"With this firewall rule in place, we\u2019re ready to configure MongoDB to listen on its public interface."),(0,s.kt)("p",null,"Step 2 \u2014 Configuring a Public bindIP\nTo allow remote connections, we will add our host\u2019s publically-routable IP address to the mongod.conf file."),(0,s.kt)("p",null,"sudo nano /etc/mongod.conf"),(0,s.kt)("p",null,"In the net stanza, add the MongoHost\u2019s IP to the bindIp line:"),(0,s.kt)("p",null,"Excerpt of /etc/mongod.conf\n. . .\nnet:\nport: 27017\nbindIp: 127.0.0.1,IP_of_MongoHost\n. . ."),(0,s.kt)("p",null,"We\u2019ll save and exit the file, then restart the daemon:"),(0,s.kt)("p",null,"sudo systemctl restart mongod"),(0,s.kt)("p",null,"As we did earlier, we\u2019ll confirm restart was successful:"),(0,s.kt)("p",null,"sudo systemctl status mongod"),(0,s.kt)("p",null,"The output should contain Active: active (running), and we can proceed to our final test. Mongo is now listening on its default port."),(0,s.kt)("p",null,"Step 3 \u2014 Testing the Remote Connection\nWe\u2019ll test that Mongo is listening on its public interface by adding the --host flag with the IP address from the mongodb.conf file."),(0,s.kt)("p",null,"mongo -u AdminSammy -p --authenticationDatabase admin --host IP_address_of_MongoHost"),(0,s.kt)("p",null,"MongoDB shell version v3.4.2\nEnter password:\nconnecting to: mongodb://107.170.233.82:27017/\nMongoDB server version: 3.4.2\nReaching the prompt confirms that the daemon is listening on its public IP. At this point, any transaction between a remote connection and the MongoDB host is unencrypted so the next step, before testing the firewall, should be to secure those transations. For help with this, see MongoDB\u2019s Security documentation on Transport Encryption."),(0,s.kt)("p",null,"Conclusion\nIn this tutorial, we\u2019ve added the MongoDB repository to our package list in order to install the latest available version of MongoDB, added an administrative user, and enabled authentication."),(0,s.kt)("p",null,"We\u2019ve also shown how to configure MongoDB to accept remote connections but prevent advertising the MongoDB installation by configuring the server\u2019s firewall to allow connections only from hosts that require access."),(0,s.kt)("p",null,"Next Steps:"),(0,s.kt)("p",null,"To encrypt data in transit, see the MongoDB\u2019s Security documentation on Transport Encryption\nLearn more about using and administering MongoDB in these DigitalOcean community articles."))}p.isMDXComponent=!0}}]);