"use strict";(self.webpackChunkextention_technologies_docs=self.webpackChunkextention_technologies_docs||[]).push([[3425],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,h=d["".concat(p,".").concat(m)]||d[m]||c[m]||o;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8367:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),l=["components"],i={sidebar_position:5},p="Frappe With REST API",s={unversionedId:"React Native Starters/Frappe With REST API",id:"React Native Starters/Frappe With REST API",isDocsHomePage:!1,title:"Frappe With REST API",description:"Welcome to Frappe Framework Documentation",source:"@site/docs/React Native Starters/Frappe With REST API.md",sourceDirName:"React Native Starters",slug:"/React Native Starters/Frappe With REST API",permalink:"/docs/React Native Starters/Frappe With REST API",editUrl:"https://github.com/extension-technologies/extension-technologies.github.io/docs/React Native Starters/Frappe With REST API.md",version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Expo",permalink:"/docs/React Native Starters/Expo"}},u=[{value:"Why Frappe?",id:"why-frappe",children:[]},{value:"HTTP Api",id:"http-api",children:[{value:"RPC",id:"rpc",children:[]},{value:"REST",id:"rest",children:[]},{value:"Listing documents",id:"listing-documents",children:[]},{value:"Manipulating DocTypes",id:"manipulating-doctypes",children:[]},{value:"Simple Authentication",id:"simple-authentication",children:[]},{value:"Token &amp; Password Based Authentication",id:"token--password-based-authentication",children:[]}]}],c={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"frappe-with-rest-api"},"Frappe With REST API"),(0,o.kt)("p",null,"Welcome to Frappe Framework Documentation"),(0,o.kt)("p",null,"Frappe, is a full stack, batteries-included, web framework written in Python and Javascript with MariaDB as the database. It is the framework which powers ERPNext, is pretty generic and can be used to build database driven apps."),(0,o.kt)("h2",{id:"why-frappe"},"Why Frappe?"),(0,o.kt)("p",null,"The key difference in Frappe compared to other frameworks is that:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"meta-data is also treated as data. "),(0,o.kt)("li",{parentName:"ul"},"This enables you to build front-ends very easily. "),(0,o.kt)("li",{parentName:"ul"},"We believe in a monolithic architecture, so Frappe comes with almost everything you need to build a modern web application. "),(0,o.kt)("li",{parentName:"ul"},"It has a full featured Admin UI called the Desk that handles forms, navigation, lists, menus, permissions, file attachment and much more out of the box.")),(0,o.kt)("h2",{id:"http-api"},"HTTP Api"),(0,o.kt)("p",null,"Frappe ships with an HTTP API that can be classified into Remote Procedure Calls (RPC), to call whitelisted methods and Representational State Transfer (REST), to manipulate resources."),(0,o.kt)("p",null,"The base URL is https://{your frappe instance}. Every request shown here should be added to the end of your base URL. For example, if your instance is demo.erpnext.com, GET /api/resource/User means GET ",(0,o.kt)("a",{parentName:"p",href:"https://demo.erpnext.com/api/resource/User"},"https://demo.erpnext.com/api/resource/User"),"."),(0,o.kt)("h3",{id:"rpc"},"RPC"),(0,o.kt)("p",null," A request to an endpoint /api/method/dotted.path.to.function will call a whitelisted python function."),(0,o.kt)("p",null,"For example, GET /api/method/frappe.auth.get_logged_user will call this function from frappe's auth module:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"@frappe.whitelist()\ndef get_logged_user():\n   return frappe.session.user\n")),(0,o.kt)("p",null,"Response:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'{\n "message": "Administrator"\n}\n')),(0,o.kt)("h3",{id:"rest"},"REST"),(0,o.kt)("p",null,"All documents in Frappe are available via a RESTful API with prefix /api/resource/. You can perform all CRUD operations on them:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Create")),(0,o.kt)("p",null,"You can create a document by sending a POST request to the endpoint, /api/resource/{doctype}."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Read")),(0,o.kt)("p",null,"You can get a document by its name using the endpoint, /api/resource/{doctype}/{name}"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Update")),(0,o.kt)("p",null,"You can update a document by sending a PUT request to the endpoint, /api/resource/{doctype}/{name}. This acts like a PATCH HTTP request in which you do not have to send the whole document but only the parts you want to change."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Delete")),(0,o.kt)("p",null,"You can delete a document by its name by sending a DELETE request to the endpoint, /api/resource/{doctype}/{name}."),(0,o.kt)("h3",{id:"listing-documents"},"Listing documents"),(0,o.kt)("p",null,"To list documents, make a GET request to /api/resource/{doctype}."),(0,o.kt)("p",null,"GET /api/resource/Person"),(0,o.kt)("p",null,"All listings are returned paginated by 20 items. To change the page size, you can pass the query parameter limit_page_length. To request succesive pages, pass limit_start."),(0,o.kt)("p",null,"The response is returned as JSON Object and the listing is an array in with the key data."),(0,o.kt)("p",null,"Response:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'{\n   "data": [\n      {\n         "name": "000000012"\n      },\n      {\n         "name": "000000008"\n      }\n   ]\n}\n')),(0,o.kt)("p",null,"By default, only the name field is included in the listing. To add more fields, you can pass the fields parameter with your GET request. fields has to be a JSON array containing the fieldnames."),(0,o.kt)("p",null,"GET /api/resource/Person/?fields=",'["name","first_name"]'),(0,o.kt)("p",null,"Response:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'{\n  "data": [\n     {\n        "first_name": "Jane",\n        "name": "000000012"\n     },\n     {\n        "first_name": "John",\n        "name": "000000008"\n     }\n  ]\n}\n')),(0,o.kt)("p",null,"You can filter the listing using SQL-conditions by passing the query parameter filters. filters has to be a JSON array containing one or multiple filters. Each condition is an array of the format, ","[{doctype}, {field}, {operator}, {operand}]","."),(0,o.kt)("p",null,'For example, get the name (id) of all persons with firstname "Jane":'),(0,o.kt)("p",null,"GET /api/resource/Person?filters=[",'["Person","first_name","=","Jane"]',"]"),(0,o.kt)("p",null,"Response:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'{ "data": [ { "name": "000000012" } ] }\n')),(0,o.kt)("h3",{id:"manipulating-doctypes"},"Manipulating DocTypes"),(0,o.kt)("p",null,"A DocTypes is a specific type of document, for example: Customer, Employee or Item."),(0,o.kt)("p",null,"A DocumentName is the unique ID of a Document, for example: CUST-00001, EMP-00001 or ITEM-00001."),(0,o.kt)("p",null,"Authentication is missing in the following examples. See ","[Basic Authentication]"," and ","[OAuth2]"," for more."),(0,o.kt)("h4",{id:"get-apiresourcedoctype"},"GET /api/resource/{DocType}"),(0,o.kt)("p",null,"Get a list of documents of this DocType."),(0,o.kt)("p",null,"Params (in path):"),(0,o.kt)("p",null,"DocType (string)"),(0,o.kt)("p",null,"The DocType you'd like to receive. For example, 'Customer'."),(0,o.kt)("p",null,"Params (in query):"),(0,o.kt)("p",null,"fields []"),(0,o.kt)("p",null,"By default, only the 'name' field will be returned. To add more fields, you can pass the fields parameter. For example, fields=",'["name","country"]'),(0,o.kt)("p",null,"filters [","[(string)]","]"),(0,o.kt)("p",null,"You can filter the listing using SQL conditions by passing them in the filters parameter. Each condition is an array of the format, ","[{doctype}, {field}, {operator}, {value}]",". For example, filters=[",'["Customer", "country", "=", "India"]',"]"),(0,o.kt)("p",null,"limit_page_length (int)"),(0,o.kt)("p",null,"All listings will be paginated. With this parameter you can change the page size (how many items are teturned at once). Default: 20."),(0,o.kt)("p",null,"limit_start (int)"),(0,o.kt)("p",null,"To request successive pages, pass a multiple of your limit_page_length as limit_start. For example, to request the second page, pass limit_start as 20."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("p",null,"Get at most 20 Names (IDs) of all Customers whose phone number is 4915227058038."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X GET https://{your frappe instance}/api/resource/Customer?fields=["name"]\\\n            &filters=[["Customer","phone","=","4915227058038"]]\n')),(0,o.kt)("p",null,"Returns:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'    {\n      "data": [\n        {\n          "name": "CUST-00001"\n        },\n      ]\n    }\n')),(0,o.kt)("h4",{id:"post-apiresourcedoctype"},"POST /api/resource/{DocType}"),(0,o.kt)("p",null,"Create a new document of this DocType."),(0,o.kt)("p",null,"Params (in path):"),(0,o.kt)("p",null,"DocType (string)"),(0,o.kt)("p",null,"The DocType you'd like to create. For example, 'Customer'."),(0,o.kt)("p",null,"Content-Type: application/json"),(0,o.kt)("p",null,'Request Body: {"fieldname": value}'),(0,o.kt)("p",null,"Example:"),(0,o.kt)("p",null,"Create a new Lead named Mustermann."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl -X POST https://{your frappe instance}/api/resource/Lead \\\n     -H 'Content-Type: application/json' \\\n     -H 'Accept: application/json' \\\n     -d '{\"lead_name\":\"Mustermann\"}'\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Retrieve a specific document by name (ID).")),(0,o.kt)("p",null,"Params (in path):"),(0,o.kt)("p",null,"DocType (string)"),(0,o.kt)("p",null,"The type of the document you'd like to get. For example, 'Customer'."),(0,o.kt)("p",null,"DocumentName (string)"),(0,o.kt)("p",null,"The name (ID) of the document you'd like to get. For example, 'EMP-00001'."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("p",null,"Get the Customer with Name (ID) CUST-00001."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl -X GET https://{your frappe instance}/api/resource/Customer/CUST-00001\nPUT /api/resource/{DocType}/{DocumentName} \n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Update a specific document. This acts like a PATCH HTTP request in which you do not have to send the whole document but only the parts you want to change.")),(0,o.kt)("p",null,"Params (in path):"),(0,o.kt)("p",null,"DocType (string)"),(0,o.kt)("p",null,"The type of the document you'd like to update. For example, 'Customer'."),(0,o.kt)("p",null,"DocumentName (string)"),(0,o.kt)("p",null,"The name (ID) of the document you'd like to update. For example, 'EMP-00001'."),(0,o.kt)("p",null,"Content-Type: application/json"),(0,o.kt)("p",null,'Request Body: {"fieldname": value}'),(0,o.kt)("p",null,"Example:"),(0,o.kt)("h4",{id:"update-next-contact-date"},"Update Next Contact Date."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl -X PUT https://{your frappe instance}/api/resource/Lead/LEAD-00001 \\\n     -H 'Accept: application/json' \\\n     -H 'Content-Type: application/json' \\\n     -d '{\"contact_date\":\"2018-10-08\"}'\n")),(0,o.kt)("p",null,"Returns:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'{\n    "data": {\n        "doctype": "Lead",\n        "name": "LEAD-00001",\n        "contact_date": "2018-10-08",\n        "...": "..."\n    }\n}\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"DELETE /api/resource/{DocType}/{DocumentName}\nParams (in path):")),(0,o.kt)("p",null,"DocType (string)"),(0,o.kt)("p",null,"The type of the document you'd like to delete. For example, 'Customer'."),(0,o.kt)("p",null,"DocumentName (string)"),(0,o.kt)("p",null,"The name (ID) of the document you'd like to delete. For example, 'EMP-00001'."),(0,o.kt)("h3",{id:"simple-authentication"},"Simple Authentication"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"POST /api/method/login\nContent-Type: application/x-www-form-urlencoded")),(0,o.kt)("p",null,"Params (in body):"),(0,o.kt)("p",null,"usr (string)"),(0,o.kt)("p",null,"Username"),(0,o.kt)("p",null,"pwd (string)"),(0,o.kt)("p",null,"Password"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST https://{your frappe instance}/api/method/login \\\n     -H \'Content-Type: application/json\' \\\n     -H \'Accept: application/json\' \\\n     -d \'{"usr":"Administrator","pwd":"admin"}\'\n')),(0,o.kt)("p",null,"Returns:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"HTTP Code: 200"),(0,o.kt)("li",{parentName:"ul"},"application/json:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'    {\n        "home_page": "/desk",\n        "full_name": "Administrator",\n        "message": "Logged in"\n    }\n- Cookie: sid (send this to authenticate future requests). Expires in three days.\n```bash  \n  sid=05d8d46aaebff1c87a90f570a3ff1c0f570a3ff1c87a90f56bacd4;\n    path=/;\n    domain=.{your frappe instance};\n    Expires=Sat, 29 Sep 2018 00:59:54 GMT;\n')),(0,o.kt)("p",null,"Error:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"HTTP Code: 401"),(0,o.kt)("li",{parentName:"ul"},"text/html: Wrong password or username.\nGET /api/method/logout\nExample:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"    curl -X GET https://{your frappe instance}/api/method/logout\n")),(0,o.kt)("p",null,"Returns:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"HTTP Code: 200"),(0,o.kt)("li",{parentName:"ul"},"application/json: {}\nGET /api/method/frappe.auth.get_logged_user\nGet the ID of the currently authenticated user.")),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"    curl -X GET https://{your frappe instance}/api/method/frappe.auth.get_logged_user\n")),(0,o.kt)("p",null,"Returns:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"HTTP Code: 200"),(0,o.kt)("li",{parentName:"ul"},"application/json:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'    {\n      "message": "Administrator"\n    }\n')),(0,o.kt)("h3",{id:"token--password-based-authentication"},"Token & Password Based Authentication"),(0,o.kt)("p",null,"There are two ways to authenticate through Frappe REST API. Token based authentication and password based authentication."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Token Based Authentication\nA token is a pair of API Key and API Secret. First, you must create an API User and then generate the keys in the API Access section in the User form.")),(0,o.kt)("p",null,"The token is generated by concatenating api_key and api_secret with a colon :. Pass the string token api_key:api_secret to the Authorization header in the request."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"fetch('http://<base-url>/api/method/frappe.auth.get_logged_user', {\n    headers: {\n        'Authorization': 'token api_key:api_secret'\n    }\n})\n.then(r => r.json())\n.then(r => {\n    console.log(r);\n})\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'\u279c curl http://<base-url>/api/method/frappe.auth.get_logged_user -H "Authorization: token api_key:api_secret"\n')),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Password Based Authentication\nPassword based authentication relies on cookies and session data to maintain authentication in subsequent requests. In most cases, the library you are using to issue REST calls will handle session data, but if it doesn't you should use Token based authentication.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"fetch('http://<base-url>/api/method/login', {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n        usr: 'username or email',\n        pwd: 'password'\n    })\n})\n.then(r => r.json())\n.then(r => {\n    console.log(r);\n})\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'\u279c curl --cookie-jar snowcookie --request POST "http://<base-url>/api/method/login" -H \'Content-Type: application/json\' -H \'Accept: application/json\' --data-raw "{ \\"usr\\" : \\"<username>\\", \\"pwd\\": \\"<password>\\" }"\n{"message":"Logged In","home_page":"/app","full_name":"<User:full_name>","dashboard_route":"/sites"}\n\n\u279c curl --cookie snowcookie --request POST "http://<base-url>/api/method/frappe.auth.get_logged_user" -H \'Accept: application/json\'\n{"message":"<username>"}\n')))}d.isMDXComponent=!0}}]);