"use strict";(self.webpackChunkextention_technologies_docs=self.webpackChunkextention_technologies_docs||[]).push([[9950],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,g=d["".concat(o,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(g,s(s({ref:t},c),{},{components:n})):a.createElement(g,s({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var p=2;p<i;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4018:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return o},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),s=["components"],l={sidebar_position:2},o="TypeScript Basics",p={unversionedId:"React Native Starters/TypeScript Basics",id:"React Native Starters/TypeScript Basics",isDocsHomePage:!1,title:"TypeScript Basics",description:"TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. TypeScript is pure object oriented with classes, interfaces and statically typed like C# or Java.",source:"@site/docs/React Native Starters/TypeScript Basics.md",sourceDirName:"React Native Starters",slug:"/React Native Starters/TypeScript Basics",permalink:"/docs/React Native Starters/TypeScript Basics",editUrl:"https://github.com/extension-technologies/extension-technologies.github.io/docs/React Native Starters/TypeScript Basics.md",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"React Native UI Components",permalink:"/docs/React Native Starters/React Native UI Components"},next:{title:"React Native Paper",permalink:"/docs/React Native Starters/React Native Paper"}},c=[{value:"Defination",id:"defination",children:[]},{value:"Features of TypeScript",id:"features-of-typescript",children:[]},{value:"Why Use TypeScript",id:"why-use-typescript",children:[]},{value:"TypeScript-Syntax",id:"typescript-syntax",children:[]},{value:"Test Youe Code Here",id:"test-youe-code-here",children:[]},{value:"TypeScript-Data Type",id:"typescript-data-type",children:[]},{value:"Variable Declaration in TypeScript",id:"variable-declaration-in-typescript",children:[]},{value:"TypeScript - Union",id:"typescript---union",children:[]},{value:"TypeScript-Class",id:"typescript-class",children:[{value:"Class Inheritance",id:"class-inheritance",children:[]}]},{value:"TypeScript \u2500 Class inheritance and Method Overriding",id:"typescript-\u2500-class-inheritance-and-method-overriding",children:[]},{value:"TypeScript - Interfaces",id:"typescript---interfaces",children:[]}],u={toc:c};function d(e){var t=e.components,l=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"typescript-basics"},"TypeScript Basics"),(0,i.kt)("p",null," TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. TypeScript is pure object oriented with classes, interfaces and statically typed like C# or Java."),(0,i.kt)("h2",{id:"defination"},"Defination"),(0,i.kt)("p",null," TypeScript is a strongly typed, object oriented, compiled language. It was designed by Microsoft. TypeScript is both a language and a set of tools. "),(0,i.kt)("p",null," TypeScript is a typed superset of JavaScript compiled to JavaScript. In other words, TypeScript is JavaScript plus some additional features."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"TypeScript Logo",src:n(6115).Z})),(0,i.kt)("h2",{id:"features-of-typescript"},"Features of TypeScript"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",null,"TypeScript is just JavaScript"),(0,i.kt)("p",{parentName:"li"},"TypeScript starts with JavaScript and ends with JavaScript. Typescript adopts the basic building blocks of your program from JavaScript. Hence, you only need to know JavaScript to use TypeScript. All TypeScript code is converted into its JavaScript equivalent for the purpose of execution.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",null,"TypeScript supports other JS libraries"),(0,i.kt)("p",{parentName:"li"},"Compiled TypeScript can be consumed from any JavaScript code. TypeScript-generated JavaScript can reuse all of the existing JavaScript frameworks, tools, and libraries.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",null,"JavaScript is TypeScript"),(0,i.kt)("p",{parentName:"li"},"This means that any valid .js file can be renamed to .ts and compiled with other TypeScript files.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",null,"TypeScript is portable"),(0,i.kt)("p",{parentName:"li"},"TypeScript is portable across browsers, devices, and operating systems. It can run on any environment that JavaScript runs on. Unlike its counterparts, TypeScript doesn\u2019t need a dedicated VM or a specific runtime environment to execute."))),(0,i.kt)("h2",{id:"why-use-typescript"},"Why Use TypeScript"),(0,i.kt)("p",null,"  TypeScript is superior to its other counterparts like CoffeeScript and Dart programming languages in a way that TypeScript is extended JavaScript. In contrast, languages like Dart, CoffeeScript are new languages in themselves and require language-specific execution environment."),(0,i.kt)("p",null,"  The benefits of TypeScript include \u2212"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Compilation \u2212 JavaScript is an interpreted language. Hence, it needs to be run to test that it is valid. It means you write all the codes just to find no output, in case there is an error. Hence, you have to spend hours trying to find bugs in the code. The TypeScript transpiler provides the error-checking feature. TypeScript will compile the code and generate compilation errors, if it finds some sort of syntax errors. This helps to highlight errors before the script is run.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Strong Static Typing \u2212 JavaScript is not strongly typed. TypeScript comes with an optional static typing and type inference system through the TLS (TypeScript Language Service). The type of a variable, declared with no type, may be inferred by the TLS based on its value.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"TypeScript supports type definitions for existing JavaScript libraries. TypeScript Definition file (with .d.ts extension) provides definition for external JavaScript libraries. Hence, TypeScript code can contain these libraries.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"TypeScript supports Object Oriented Programming concepts like classes, interfaces, inheritance, etc."))),(0,i.kt)("h2",{id:"typescript-syntax"},"TypeScript-Syntax"),(0,i.kt)("p",null," Lets start by simple example-"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'var message:string = "Hello World" \nconsole.log(message)\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'var message = "Hello World";\nconsole.log(message);\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Line 1 declares a variable by the name message. Variables are a mechanism to store values in a program.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Line 2 prints the variable\u2019s value to the prompt. Here, console refers to the terminal window. The function log () is used to display text on the screen."))),(0,i.kt)("h2",{id:"test-youe-code-here"},"Test Youe Code Here"),(0,i.kt)("p",null,"You may test your scripts online by using The TypeScript at ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/play"},"Click Here")," "),(0,i.kt)("h2",{id:"typescript-data-type"},"TypeScript-Data Type"),(0,i.kt)("p",null," TypeScript provides data types as a part of its optional Type System. The data type classification is as given below \u2212"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"GitHub Logo",src:n(4048).Z})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The Any type\nThe any data type is the super type of all types in TypeScript. It denotes a dynamic type. Using the any type is equivalent to opting out of type checking for a variable.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Built-in types\nThe following table illustrates all the built-in types in TypeScript \u2212"),(0,i.kt)("table",{parentName:"li"},(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Data type"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Keyword"),(0,i.kt)("th",{parentName:"tr",align:"right"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Number"),(0,i.kt)("td",{parentName:"tr",align:"center"},"number"),(0,i.kt)("td",{parentName:"tr",align:"right"},"It can be used to represent both, integers and fractions.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"String"),(0,i.kt)("td",{parentName:"tr",align:"center"},"string"),(0,i.kt)("td",{parentName:"tr",align:"right"},"Represents a sequence of characters")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,i.kt)("td",{parentName:"tr",align:"center"},"boolean"),(0,i.kt)("td",{parentName:"tr",align:"right"},"Represents logical values, true and false")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Void"),(0,i.kt)("td",{parentName:"tr",align:"center"},"void"),(0,i.kt)("td",{parentName:"tr",align:"right"},"Used on function return types to represent non-returning functions")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Null"),(0,i.kt)("td",{parentName:"tr",align:"center"},"null"),(0,i.kt)("td",{parentName:"tr",align:"right"},"Represents an intentional absence of an object value.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Undefined"),(0,i.kt)("td",{parentName:"tr",align:"center"},"undefined"),(0,i.kt)("td",{parentName:"tr",align:"right"},"Denotes value given to all uninitialized variables"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"User-defined Types"),(0,i.kt)("p",{parentName:"li"},"User-defined types include Enumerations (enums), classes, interfaces, arrays, and tuple."))),(0,i.kt)("h2",{id:"variable-declaration-in-typescript"},"Variable Declaration in TypeScript"),(0,i.kt)("p",null," The type syntax for declaring a variable in TypeScript is to include a colon (:) after the variable name, followed by its type. Just as in JavaScript, we use the var keyword to declare a variable."),(0,i.kt)("p",null," When you declare a variable, you have four options \u2212"),(0,i.kt)("p",null," The following table illustrates the valid syntax for variable declaration \u2212"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"S.No."),(0,i.kt)("th",{parentName:"tr",align:"center"},"Variable Declaration Syntax"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"1"),(0,i.kt)("td",{parentName:"tr",align:"center"},"var name:string = \u201dmary\u201d")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"2"),(0,i.kt)("td",{parentName:"tr",align:"center"},"var name:string;")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"3"),(0,i.kt)("td",{parentName:"tr",align:"center"},"var name = \u201dmary\u201d")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"4"),(0,i.kt)("td",{parentName:"tr",align:"center"},"var name")))),(0,i.kt)("p",null," Example->"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'var name:string = "John"; \nvar score1:number = 50;\nvar score2:number = 42.50\nvar sum = score1 + score2 \nconsole.log("name"+name) \nconsole.log("first score: "+score1) \nconsole.log("second score: "+score2) \nconsole.log("sum of the scores: "+sum)\n')),(0,i.kt)("p",null,"When You Compile it will generate Code in JavaScript\nJavaScript->"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'//Generated by typescript \nvar name = "John";\nvar score1 = 50;\nvar score2 = 42.50;\nvar sum = score1 + score2;\nconsole.log("name" + name);\nconsole.log("first score: " + score1);\nconsole.log("second score : " + score2);\nconsole.log("sum of the scores: " + sum);\n')),(0,i.kt)("h2",{id:"typescript---union"},"TypeScript - Union"),(0,i.kt)("p",null,"TypeScript 1.4 gives programs the ability to combine one or two types. Union types are a powerful way to express a value that can be one of the several types. Two or more data types are combined using the pipe symbol (|) to denote a Union Type. In other words, a union type is written as a sequence of types separated by vertical bars."),(0,i.kt)("p",null,"Syntax: Union literal-"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"Type1|Type2|Type3\n")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'var val:string|number \nval = 12 \nconsole.log("numeric value of val "+val) \nval = "This is a string" \nconsole.log("string value of val "+val)\n')),(0,i.kt)("p",null,"In the above example, the variable\u2019s type is union. It means that the variable can contain either a number or a string as its value."),(0,i.kt)("p",null,"On compiling, it will generate following JavaScript code."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'//Generated by typescript 1.8.10\nvar val;\nval = 12;\nconsole.log("numeric value of val " + val);\nval = "This is a string";\nconsole.log("string value of val " + val);\n')),(0,i.kt)("p",null,"Its output is as follows \u2212"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"numeric value of val  12 \nstring value of val this is a string \n")),(0,i.kt)("h2",{id:"typescript-class"},"TypeScript-Class"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Creating classes\nUse the class keyword to declare a class in TypeScript. The syntax for the same is given below \u2212"),(0,i.kt)("p",{parentName:"li"},"Syntax:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"}," class class_name { \n   //class scope \n }\n")),(0,i.kt)("p",null," The class keyword is followed by the class name. The rules for identifiers must be considered while naming a class."),(0,i.kt)("p",null,"Consider a class Person in typescript."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"class Person {\n}\n")),(0,i.kt)("p",null,"On compiling, it will generate following JavaScript code."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"//Generated by typescript 1.8.10\nvar Person = (function () {\n   function Person() {\n   }\n   return Person;\n}());\n")),(0,i.kt)("p",null,"Example Declaring a class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'class Car { \n   //field \n   engine:string; \n   \n   //constructor \n   constructor(engine:string) { \n      this.engine = engine \n   }  \n   \n   //function \n   disp():void { \n      console.log("Function displays Engine is  :   "+this.engine) \n   } \n} \n\n//create an object \nvar obj = new Car("XXSY1")\n\n//access the field \nconsole.log("Reading attribute value Engine as :  "+obj.engine)  \n\n//access the function\nobj.disp()\n')),(0,i.kt)("p",null,"On compiling, it will generate following JavaScript code."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'//Generated by typescript 1.8.10\nvar Car = (function () {\n   //constructor\n   function Car(engine) {\n      this.engine = engine;\n   }\n    \n   //function\n   Car.prototype.disp = function () {\n      console.log("Function displays Engine is  :   " + this.engine);\n   };\n   return Car;\n}());\n\n//create an object\nvar obj = new Car("XXSY1");\n\n//access the field\nconsole.log("Reading attribute value Engine as :  " + obj.engine);\n\n//access the function\nobj.disp();\n')),(0,i.kt)("p",null,"The output of the above code is as follows \u2212"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"Reading attribute value Engine as :  XXSY1 \nFunction displays Engine is  :   XXSY1\n")),(0,i.kt)("h3",{id:"class-inheritance"},"Class Inheritance"),(0,i.kt)("p",null,"TypeScript supports the concept of Inheritance. Inheritance is the ability of a program to create new classes from an existing class. The class that is extended to create newer classes is called the parent class/super class. The newly created classes are called the child/sub classes."),(0,i.kt)("p",null,"A class inherits from another class using the \u2018extends\u2019 keyword. Child classes inherit all properties and methods except private members and constructors from the parent class."),(0,i.kt)("p",null,"Syntax"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"class child_class_name extends parent_class_name\n")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'class Shape { \n   Area:number \n   \n   constructor(a:number) { \n      this.Area = a \n   } \n} \n\nclass Circle extends Shape { \n   disp():void { \n      console.log("Area of the circle:  "+this.Area) \n   } \n}\n  \nvar obj = new Circle(223); \nobj.disp()\n')),(0,i.kt)("p",null,"The output of the above code is as follows \u2212"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"Area of the Circle: 223\n")),(0,i.kt)("p",null,"However, TypeScript doesn\u2019t support multiple inheritance."),(0,i.kt)("h2",{id:"typescript-\u2500-class-inheritance-and-method-overriding"},"TypeScript \u2500 Class inheritance and Method Overriding"),(0,i.kt)("p",null,"Method Overriding is a mechanism by which the child class redefines the superclass\u2019s method. The following example illustrates the same \u2212"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'class PrinterClass { \n   doPrint():void {\n      console.log("doPrint() from Parent called\u2026") \n   } \n} \n\nclass StringPrinter extends PrinterClass { \n   doPrint():void { \n      super.doPrint() \n      console.log("doPrint() is printing a string\u2026")\n   } \n} \n\nvar obj = new StringPrinter() \nobj.doPrint()\n')),(0,i.kt)("p",null,"The super keyword is used to refer to the immediate parent of a class. The keyword can be used to refer to the super class version of a variable, property or method. Line 13 invokes the super class version of the doWork() function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'//Generated by typescript 1.8.10\nvar __extends = (this && this.__extends) || function (d, b) {\n   for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n   function __() { this.constructor = d; }\n   d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar PrinterClass = (function () {\n   function PrinterClass() {\n   }\n   PrinterClass.prototype.doPrint = function () { \n      console.log("doPrint() from Parent called\u2026"); \n   };\n   return PrinterClass;\n}());\n\nvar StringPrinter = (function (_super) {\n   __extends(StringPrinter, _super);\n    \n   function StringPrinter() {\n      _super.apply(this, arguments);\n   }\n    \n   StringPrinter.prototype.doPrint = function () {\n      _super.prototype.doPrint.call(this);\n      console.log("doPrint() is printing a string\u2026");\n   };\n    \n   return StringPrinter;\n}(PrinterClass));\n\nvar obj = new StringPrinter();\nobj.doPrint();\n')),(0,i.kt)("p",null,"The output of the above code is as follows \u2212"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"doPrint() from Parent called\u2026 \ndoPrint() is printing a string\u2026\n")),(0,i.kt)("h2",{id:"typescript---interfaces"},"TypeScript - Interfaces"),(0,i.kt)("p",null,"Interfaces define properties, methods, and events, which are the members of the interface. Interfaces contain only the declaration of the members. It is the responsibility of the deriving class to define the members. It often helps in providing a standard structure that the deriving classes would follow."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",null,"Declaring Interfaces"),"The interface keyword is used to declare an interface. Here is the syntax to declare an interface \u2212")),(0,i.kt)("p",null,"Syntax\ninterface interface_name {\n}"),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'interface IPerson { \n   firstName:string, \n   lastName:string, \n   sayHi: ()=>string \n} \n\nvar customer:IPerson = { \n   firstName:"Tom",\n   lastName:"Hanks", \n   sayHi: ():string =>{return "Hi there"} \n} \n\nconsole.log("Customer Object ") \nconsole.log(customer.firstName) \nconsole.log(customer.lastName) \nconsole.log(customer.sayHi())  \n\nvar employee:IPerson = { \n   firstName:"Jim",\n   lastName:"Blakes", \n   sayHi: ():string =>{return "Hello!!!"} \n} \n  \nconsole.log("Employee  Object ") \nconsole.log(employee.firstName);\nconsole.log(employee.lastName);\n')),(0,i.kt)("p",null,"The example defines an interface. The customer object is of the type IPerson. Hence, it will now be binding on the object to define all properties as specified by the interface."),(0,i.kt)("p",null,"Another object with following signature, is still considered as IPerson because that object is treated by its size or signature."),(0,i.kt)("p",null,"On compiling, it will generate following JavaScript code."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'//Generated by typescript 1.8.10\nvar customer = { firstName: "Tom", lastName: "Hanks",\n   sayHi: function () { return "Hi there"; }\n};\nconsole.log("Customer Object ");\nconsole.log(customer.firstName);\nconsole.log(customer.lastName);\nconsole.log(customer.sayHi());\nvar employee = { firstName: "Jim", lastName: "Blakes",\n   sayHi: function () { return "Hello!!!"; } };\n\nconsole.log("Employee  Object ");\nconsole.log(employee.firstName);\nconsole.log(employee.lastName);\n')),(0,i.kt)("p",null,"The output of the above example code is as follows \u2212"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"Customer object \nTom \nHanks \nHi there \nEmployee  object \nJim  \nBlakes \nHello!!!\n")),(0,i.kt)("p",null,"Interfaces are not to be converted to JavaScript. It\u2019s just part of TypeScript."))}d.isMDXComponent=!0},4048:function(e,t,n){t.Z=n.p+"assets/images/data_types-5ab0ad451d6959e6d913f7645a438be7.png"},6115:function(e,t,n){t.Z=n.p+"assets/images/typescript_figure-00085f86e8bd3006547ff1693b157546.jpg"}}]);