"use strict";(self.webpackChunkextention_technologies_docs=self.webpackChunkextention_technologies_docs||[]).push([[6359],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||r;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4795:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return d},default:function(){return p}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=["components"],s={sidebar_position:2},l="React Native UI Components",c={unversionedId:"React Native Starters/React Native UI Components",id:"React Native Starters/React Native UI Components",isDocsHomePage:!1,title:"React Native UI Components",description:"React Native provides a number of built-in Components ready for you to use in your app.",source:"@site/docs/React Native Starters/React Native UI Components.md",sourceDirName:"React Native Starters",slug:"/React Native Starters/React Native UI Components",permalink:"/docs/React Native Starters/React Native UI Components",editUrl:"https://github.com/extension-technologies/extension-technologies.github.io/docs/React Native Starters/React Native UI Components.md",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"React Patterns",permalink:"/docs/React Native Starters/React Patterns"},next:{title:"TypeScript Basics",permalink:"/docs/React Native Starters/TypeScript Basics"}},d=[{value:"ActivityIndicator",id:"activityindicator",children:[]},{value:"Button",id:"button",children:[]},{value:"FlatList",id:"flatlist",children:[]},{value:"Image",id:"image",children:[]},{value:"ImageBackground",id:"imagebackground",children:[]},{value:"KeyboardAvoidingView",id:"keyboardavoidingview",children:[]},{value:"Modal",id:"modal",children:[]},{value:"Text",id:"text",children:[]},{value:"TextInput",id:"textinput",children:[]},{value:"Switch",id:"switch",children:[]},{value:"SectionList",id:"sectionlist",children:[]},{value:"Flexbox",id:"flexbox",children:[]},{value:"VirtualizedList",id:"virtualizedlist",children:[]},{value:"DrawerLayoutAndroid",id:"drawerlayoutandroid",children:[]},{value:"SafeAreaView",id:"safeareaview",children:[]}],u={toc:d};function p(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"react-native-ui-components"},"React Native UI Components"),(0,r.kt)("p",null,"  React Native provides a number of built-in Components ready for you to use in your app.\nFor e.g-FlatList,SetionList,Activity Indicator,Switch and so-on."),(0,r.kt)("p",null," There are number of components in React Native.We will discuss few of them here."),(0,r.kt)("h3",{id:"activityindicator"},"ActivityIndicator"),(0,r.kt)("p",null," Displays a circular loading indicator.\nCopy Code Below and run Yourself"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"import React from \"react\";\nimport { ActivityIndicator, StyleSheet, Text, View } from \"react-native\";\nconst App=()=>{\n return(\n <View style={styles.body}>\n\n<ActivityIndicator\nstyle={styles.activity} \n/>\n<ActivityIndicator size='large' color='green' animating='false'\n/>\n</View>\n );\n\n}\nconst styles=StyleSheet.create({\n body:{\nflex: 1,\n   justifyContent: \"center\"\n },\n activity:{\n   margin:20,\n   \n }\n});\n\n\nexport default App;\n")),(0,r.kt)("h3",{id:"button"},"Button"),(0,r.kt)("p",null," Most users interact with mobile through touches. There are combinations of gestures that work on it, such as tapping on the button, zooming the map, scrolling a list, etc. A button is one of the components that work on its click."),(0,r.kt)("p",null,"React Native Button is a basic component that works by clicking on it. It imports the Button class of react-native."),(0,r.kt)("p",null," Copy Code Below and run Yourself"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'import * as React from \'react\';\nimport { Text, View, StyleSheet,Button } from \'react-native\';\nimport Constants from \'expo-constants\';\nconst App=()=> {\n const onPressLearnMore=()=>{\n   alert(\'button Clicked\')\n\n }\n return (\n   <View style={styles.container}>\n    <Button \n onPress={onPressLearnMore}\n title="Click Me"\n color="#841584"\n accessibilityLabel="Learn more about this purple button"\n nextFocusLeft=\'20\'\n/>\n<Button\n onPress={onPressLearnMore}\n title="Click Me"\n color="#841584"\n accessibilityLabel="Learn more about this purple button"\n nextFocusLeft=\'20\'\n/>\n<Button\n onPress={onPressLearnMore}\n title="Click Me"\n color="#841584"\n accessibilityLabel="Learn more about this purple button"\n nextFocusLeft=\'20\'\n/>\n\n<Button\n onPress={onPressLearnMore}\n title="Click Me"\n color="#841584"\n accessibilityLabel="Learn more about this purple button"\n nextFocusLeft=\'20\'\n/>\n   </View>\n   \n );\n}\n\nconst styles = StyleSheet.create({\n container: {\n   flex: 1,\n   justifyContent: \'center\',\n   paddingTop: Constants.statusBarHeight,\n   backgroundColor: \'#ecf0f1\',\n   padding: 8,\n\n },\n \n\n});\nexport default App;\n')),(0,r.kt)("h3",{id:"flatlist"},"FlatList"),(0,r.kt)("p",null," The FlatList component displays the similar structured data in a scrollable list. It works well for large lists of data where the number of list items might change over time. The FlatList shows only those renders elements which are currently displaying on the screen, not all the elements of the list at once."),(0,r.kt)("p",null," The FlatList component takes two required props: data and renderItem."),(0,r.kt)("p",null," The data is the source of elements for the list, and renderItem takes one item from the source and returns a formatted component to render.\nCopy Code Below and run Yourself"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"import React from 'react';\nimport { SafeAreaView, View, FlatList, StyleSheet, Text, StatusBar } from 'react-native';\n\nconst DATA = [\n {\n   id: '1',\n   title: 'First Item',\n },\n {\n   id: '2',\n   title: 'Second Item',\n },\n {\n   id: '3',\n   title: 'Third Item',\n },\n  {\n   id: '4',\n   title: 'Fouth Item',\n },\n  {\n   id: '5',\n   title: 'Fifth Item',\n },\n  {\n   id: '6',\n   title: 'Sixth Item',\n },\n];\n\nconst Item = ({ title }) => (\n <View style={styles.item}>\n   <Text style={styles.title}>{title}</Text>\n </View>\n);\n\nconst App = () => {\n const renderItem = ({ item }) => (\n   <Item title={item.title} />\n );\n\n return (\n   <SafeAreaView style={styles.container}>\n     <FlatList\n     \n     horizontal={false}\n     numColumns={2}\n     inverted='-1'\n       data={DATA}\n       renderItem={renderItem}\n       keyExtractor={item => item.id}\n     />\n   </SafeAreaView>\n );\n}\n\nconst styles = StyleSheet.create({\n container: {\n   flex: 1,\n   \n },\n item: {\n   backgroundColor: 'lightblue',\n   padding: 20,\n   marginVertical: 8,\n   marginHorizontal: 16,\n },\n title: {\n   fontSize: 32,\n },\n});\n\nexport default App;\n")),(0,r.kt)("h3",{id:"image"},"Image"),(0,r.kt)("p",null," A React component for displaying different types of images, including network images, static resources, temporary local images, and images from local disk, such as the camera roll."),(0,r.kt)("p",null," This example shows fetching and displaying an image from local storage as well as one from network and even from data provided in the 'data:' uri scheme."),(0,r.kt)("p",null," Copy Code Below and run Yourself"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"import React from 'react';\nimport { View,Image } from 'react-native';\n\n\nconst MyApp= () =>{\n return(\n <View>\n <Image\n source={{\n   uri:\"https://reactnative.dev/docs/assets/p_cat1.png\"}}\n    style={{width: 200, height: 200}}\n   />\n </View>\n );\n}\n\nexport default MyApp;\n")),(0,r.kt)("h3",{id:"imagebackground"},"ImageBackground"),(0,r.kt)("p",null," A common feature request from developers familiar with the web is background-image. To handle this use case, you can use the ImageBackground component, which has the same props as Image, and add whatever children to it you would like to layer on top of it."),(0,r.kt)("p",null,"Copy Code Below and run Yourself "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'import React from "react";\nimport { ImageBackground, StyleSheet, Text, View } from "react-native";\n\nconst image = { uri: "https://reactjs.org/logo-og.png" };\n\nconst App = () => (\n <View style={styles.container}>\n   <ImageBackground source={image} resizeMode="cover" style={styles.image}>\n   <Text style={styles.text}>Background Image</Text>\n     \n   </ImageBackground>\n </View>\n);\n\nconst styles = StyleSheet.create({\n container: {\n   flex: 1,\n },\n image: {\n   flex: 1,\n   justifyContent: "center"\n },\n text: {\n   color: "white",\n   fontSize: 42,\n   lineHeight: 84,\n   fontWeight: "bold",\n   textAlign: "center",\n   backgroundColor: "#000000c0"\n }\n});\n\nexport default App;\n')),(0,r.kt)("h3",{id:"keyboardavoidingview"},"KeyboardAvoidingView"),(0,r.kt)("p",null," It is a component to solve the common problem of views that need to move out of the way of the virtual keyboard. It can automatically adjust either its height, position, or bottom padding based on the keyboard height."),(0,r.kt)("p",null," Note: For better understanding run this in your Physical Device"),(0,r.kt)("p",null,"It doesn't overlap content"),(0,r.kt)("p",null,"Copy Code Below and run Yourself "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'import React from \'react\';\nimport { View, KeyboardAvoidingView, TextInput, StyleSheet, Text, Platform, TouchableWithoutFeedback, Button, Keyboard  } from \'react-native\';\n\nconst KeyboardAvoidingComponent = () => {\n return (\n   <KeyboardAvoidingView\n     behavior={Platform.OS === "ios" ? "padding" : "height"}\n     style={styles.container}\n   >\n     <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\n       <View style={styles.inner}>\n         <Text style={styles.header}>Header</Text>\n         <TextInput placeholder="Username" style={styles.textInput} />\n         <View style={styles.btnContainer}>\n           <Button title="Submit" onPress={() => null} />\n         </View>\n       </View>\n     </TouchableWithoutFeedback>\n   </KeyboardAvoidingView>\n );\n};\n\nconst styles = StyleSheet.create({\n container: {\n   flex: 1\n },\n inner: {\n   padding: 24,\n   flex: 1,\n   justifyContent: "space-around"\n },\n header: {\n   fontSize: 36,\n   marginBottom: 48\n },\n textInput: {\n   height: 40,\n   borderColor: "#000000",\n   borderBottomWidth: 1,\n   marginBottom: 36\n },\n btnContainer: {\n   backgroundColor: "white",\n   marginTop: 12\n }\n});\n\nexport default KeyboardAvoidingComponent;\n')),(0,r.kt)("h3",{id:"modal"},"Modal"),(0,r.kt)("p",null," The Modal component is a basic way to present content above an enclosing view."),(0,r.kt)("p",null,"Copy Code Below and run Yourself "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'import React, { useState } from "react";\nimport { Alert, Modal, StyleSheet, Text, Pressable, View } from "react-native";\n\nconst App = () => {\n const [modalVisible, setModalVisible] = useState(false);\n return (\n   <View style={styles.centeredView}>\n     <Modal\n       animationType="slide"\n       transparent={true}\n       visible={modalVisible}\n       onRequestClose={() => {\n         Alert.alert("Modal has been closed.");\n         setModalVisible(!modalVisible);\n       }}\n     >\n       <View style={styles.centeredView}>\n         <View style={styles.modalView}>\n           <Text style={styles.modalText}>Hello World!</Text>\n           <Pressable\n             style={[styles.button, styles.buttonClose]}\n             onPress={() => setModalVisible(!modalVisible)}\n           >\n             <Text style={styles.textStyle}>Hide Modal</Text>\n           </Pressable>\n         </View>\n       </View>\n     </Modal>\n     <Pressable\n       style={[styles.button, styles.buttonOpen]}\n       onPress={() => setModalVisible(true)}\n     >\n       <Text style={styles.textStyle}>Show Modal</Text>\n     </Pressable>\n   </View>\n );\n};\n\nconst styles = StyleSheet.create({\n centeredView: {\n   flex: 1,\n   justifyContent: "center",\n   alignItems: "center",\n   marginTop: 22\n },\n modalView: {\n   margin: 20,\n   backgroundColor: "white",\n   borderRadius: 20,\n   padding: 35,\n   alignItems: "center",\n   shadowColor: "#000",\n   shadowOffset: {\n     width: 0,\n     height: 2\n   },\n   shadowOpacity: 0.25,\n   shadowRadius: 4,\n   elevation: 5\n },\n button: {\n   borderRadius: 20,\n   padding: 10,\n   elevation: 2\n },\n buttonOpen: {\n   backgroundColor: "#F194FF",\n },\n buttonClose: {\n   backgroundColor: "#2196F3",\n },\n textStyle: {\n   color: "white",\n   fontWeight: "bold",\n   textAlign: "center"\n },\n modalText: {\n   marginBottom: 15,\n   textAlign: "center"\n }\n});\n\nexport default App;\n')),(0,r.kt)("h3",{id:"text"},"Text"),(0,r.kt)("p",null," A React component for displaying text."),(0,r.kt)("p",null," Text supports nesting, styling, and touch handling.\nCopy Code Below and run Yourself "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"import React from 'react';\nimport { View,Text } from 'react-native';\n\n\nconst MyApp= () =>{\n return(\n <View>\n <Text>Text Tag Example</Text>\n </View>\n );\n}\n\nexport default MyApp;\n")),(0,r.kt)("h3",{id:"textinput"},"TextInput"),(0,r.kt)("p",null," It is the fundamental component to input text. It has several props which configure the different features, such as onChangeText that takes a function and call it whenever the text changed. The onSubmitEditing prop takes a function, which is called when the text submitted."),(0,r.kt)("p",null," There are several things, which can be performed with text input, such as validating the text inside while user types."),(0,r.kt)("p",null," Copy Code Below and run Yourself "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'import React from "react";\nimport { SafeAreaView, StyleSheet, TextInput } from "react-native";\n\nconst TextInputFormat = () => {\n const [text, onChangeText] = React.useState("Useless Text");\n const [number, onChangeNumber] = React.useState(null);\n\n return (\n   <SafeAreaView>\n    \n     <TextInput\n       style={styles.input}\n       onChangeText={onChangeNumber}\n       value={number}\n       placeholder="Enter Text Here"\n       keyboardType="numeric"\n     />\n   </SafeAreaView>\n );\n};\n\nconst styles = StyleSheet.create({\n input: {\n   height: 40,\n   margin: 12,\n   borderWidth: 1,\n   padding: 10,\n },\n\n});\n\nexport default TextInputFormat;\n')),(0,r.kt)("h3",{id:"switch"},"Switch"),(0,r.kt)("p",null," React Native Switch is a Boolean control component which sets its value to true or false. It has an onValueChange callback method that updates its value prop. If the value prop is not changed, the Switch component continues supplied the value prop instead of the expected result of any user actions."),(0,r.kt)("p",null,"Copy Code Below and run Yourself "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'import React, { useState } from "react";\nimport { View, Switch, StyleSheet } from "react-native";\n\nconst App = () => {\n const [isEnabled, setIsEnabled] = useState(false);\n const toggleSwitch = () => setIsEnabled(previousState => !previousState);\n\n return (\n   <View style={styles.container}>\n     <Switch\n       trackColor={{ false: "#767577", true: "orange" }}\n       thumbColor={isEnabled ? "#f5dd4b" : "green"}\n       ios_backgroundColor="#3e3e3e"\n       onValueChange={toggleSwitch}\n       value={isEnabled}\n     />\n     \n   </View>\n );\n}\n\nconst styles = StyleSheet.create({\n container: {\n   flex: 1,\n   alignItems: "center",\n   justifyContent: "center"\n }\n});\n\nexport default App;\n')),(0,r.kt)("h3",{id:"sectionlist"},"SectionList"),(0,r.kt)("p",null," The React Native SectionList component is a list view component which sets the list of data into broken logical section. The broken data can be implemented using its section header prop renderSectionHeader."),(0,r.kt)("p",null," Copy Code Below and run Yourself "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'import React from "react";\nimport { StyleSheet, Text, View, SafeAreaView, SectionList, StatusBar } from "react-native";\n\nconst DATA = [\n {\n   title: "Main dishes",\n   data: ["Pizza", "Burger", "Risotto"]\n },\n {\n   title: "Sides",\n   data: ["French Fries", "Onion Rings", "Fried Shrimps"]\n },\n {\n   title: "Drinks",\n   data: ["Water", "Coke", "Beer"]\n },\n {\n   title: "Desserts",\n   data: ["Cheese Cake", "Ice Cream"]\n }\n];\n\nconst Item = ({ title }) => (\n <View style={styles.item}>\n   <Text style={styles.title}>{title}</Text>\n </View>\n);\n\nconst App = () => (\n <SafeAreaView style={styles.container}>\n   <SectionList\n     sections={DATA}\n     keyExtractor={(item, index) => item }\n     renderItem={({ item }) => <Item title={item} />}\n     renderSectionHeader={({ section: { title } }) => (\n       <Text style={styles.header}>{title}</Text>\n     )}\n   />\n </SafeAreaView>\n);\n\nconst styles = StyleSheet.create({\n container: {\n   flex: 1,\n   paddingTop: StatusBar.currentHeight,\n   marginHorizontal: 16\n },\n item: {\n   backgroundColor: "green",\n   padding: 20,\n   marginVertical: 8\n },\n header: {\n   fontSize: 32,\n   backgroundColor: "#fff"\n },\n title: {\n   fontSize: 24\n }\n});\n\nexport default App;\n')),(0,r.kt)("h3",{id:"flexbox"},"Flexbox"),(0,r.kt)("p",null," React Native Flexbox is an algorithm to specify the layout of component's children. It provides a consistent layout on different screen sizes."),(0,r.kt)("p",null," Property of Flexbox:"),(0,r.kt)("p",null," Flexbox provides three main properties to achieve the desired layout. These properties are: flexDirection, justifyContent, and alignItems."),(0,r.kt)("p",null," Copy Code Below and run Yourself "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'import React from "react";\nimport { StyleSheet, Text, View } from "react-native";\n\nconst Flex = () => {\n return (\n   <View style={[styles.container, {\n  \n     flexDirection: "column-reverse"\n   }]}>\n     <View style={{ flex: 2, backgroundColor: "red" }} />\n     <View style={{ flex: 3, backgroundColor: "darkorange" }} />\n     <View style={{flex:2,backgroundColor:"lightblue"}}/>\n    \n   </View>\n );\n };\n\n const styles = StyleSheet.create({\n container: {\n   flex: 10,\n   padding: 20,\n   width:100,\n   \n },\n });\n\n export default Flex;\n')),(0,r.kt)("h3",{id:"virtualizedlist"},"VirtualizedList"),(0,r.kt)("p",null,"Base implementation for the more convenient FlatList and SectionList components, which are also better documented. In general, this should only really be used if you need more flexibility than FlatList provides, e.g. for use with immutable data instead of plain arrays."),(0,r.kt)("p",null,"Copy Code & Run YourSelf:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"import React from 'react';\nimport { SafeAreaView, View, VirtualizedList, StyleSheet, Text, StatusBar } from 'react-native';\n\nconst DATA = [];\n\nconst getItem = (data, index) => ({\n  id: Math.random().toString(12).substring(0),\n  title: `Item ${index+1}`\n});\n\nconst getItemCount = (data) => 50;\n\nconst Item = ({ title }) => (\n  <View style={styles.item}>\n    <Text style={styles.title}>{title}</Text>\n  </View>\n);\n\nconst App = () => {\n  return (\n    <SafeAreaView style={styles.container}>\n      <VirtualizedList\n        data={DATA}\n        initialNumToRender={4}\n        renderItem={({ item }) => <Item title={item.title} />}\n        keyExtractor={item => item.key}\n        getItemCount={getItemCount}\n        getItem={getItem}\n      />\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight,\n  },\n  item: {\n    backgroundColor: '#f9c2ff',\n    height: 150,\n    justifyContent: 'center',\n    marginVertical: 8,\n    marginHorizontal: 16,\n    padding: 20,\n  },\n  title: {\n    fontSize: 32,\n  },\n});\n\nexport default App;\n")),(0,r.kt)("h3",{id:"drawerlayoutandroid"},"DrawerLayoutAndroid"),(0,r.kt)("p",null,"React component that wraps the platform DrawerLayout (Android only). The Drawer (typically used for navigation) is rendered with renderNavigationView and direct children are the main view (where your content goes). The navigation view is initially not visible on the screen, but can be pulled in from the side of the window specified by the drawerPosition prop and its width can be set by the drawerWidth prop."),(0,r.kt)("p",null,"Copy Code and Run YourSelf:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'import React, { useRef, useState } from "react";\nimport { Button, DrawerLayoutAndroid, Text, StyleSheet, View } from "react-native";\n\nconst App = () => {\n  const drawer = useRef(null);\n  const [drawerPosition, setDrawerPosition] = useState("left");\n  const changeDrawerPosition = () => {\n    if (drawerPosition === "left") {\n      setDrawerPosition("right");\n    } else {\n      setDrawerPosition("left");\n    }\n  };\n\n  const navigationView = () => (\n    <View style={[styles.container, styles.navigationContainer]}>\n      <Text style={styles.paragraph}>I\'m in the Drawer!</Text>\n      <Button\n        title="Close drawer"\n        onPress={() => drawer.current.closeDrawer()}\n      />\n    </View>\n  );\n\n  return (\n    <DrawerLayoutAndroid\n      ref={drawer}\n      drawerWidth={300}\n      drawerPosition={drawerPosition}\n      renderNavigationView={navigationView}\n    >\n      <View style={styles.container}>\n        <Text style={styles.paragraph}>\n          Drawer on the {drawerPosition}!\n        </Text>\n        <Button\n          title="Change Drawer Position"\n          onPress={() => changeDrawerPosition()}\n        />\n        <Text style={styles.paragraph}>\n          Swipe from the side or press button below to see it!\n        </Text>\n        <Button\n          title="Open drawer"\n          onPress={() => drawer.current.openDrawer()}\n        />\n      </View>\n    </DrawerLayoutAndroid>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: "center",\n    justifyContent: "center",\n    padding: 16\n  },\n  navigationContainer: {\n    backgroundColor: "#ecf0f1"\n  },\n  paragraph: {\n    padding: 16,\n    fontSize: 15,\n    textAlign: "center"\n  }\n});\n\nexport default App;\n')),(0,r.kt)("h3",{id:"safeareaview"},"SafeAreaView"),(0,r.kt)("p",null,"The purpose of SafeAreaView is to render content within the safe area boundaries of a device. It is currently only applicable to iOS devices with iOS version 11 or later."),(0,r.kt)("p",null,"SafeAreaView renders nested content and automatically applies padding to reflect the portion of the view that is not covered by navigation bars, tab bars, toolbars, and other ancestor views. Moreover, and most importantly, Safe Area's paddings reflect the physical limitation of the screen, such as rounded corners or camera notches (i.e. the sensor housing area on iPhone X)."),(0,r.kt)("p",null,"Copy Code & Run Yourself:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"import React from 'react';\nimport { StyleSheet, Text, SafeAreaView } from 'react-native';\n\nconst App = () => {\n  return (\n    <SafeAreaView style={styles.container}>\n      <Text>Page content</Text>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n\nexport default App;\n")))}p.isMDXComponent=!0}}]);