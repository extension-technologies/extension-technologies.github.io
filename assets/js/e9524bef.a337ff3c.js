"use strict";(self.webpackChunkextention_technologies_docs=self.webpackChunkextention_technologies_docs||[]).push([[5113],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),l=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return o.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),h=r,m=u["".concat(p,".").concat(h)]||u[h]||d[h]||i;return n?o.createElement(m,a(a({ref:t},c),{},{components:n})):o.createElement(m,a({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3044:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return d},default:function(){return m}});var o,r=n(7462),i=n(3366),a=(n(7294),n(3905)),s=["components"],p={sidebar_position:3},l="React Native with TypeScript",c={unversionedId:"React Native Starters/React Native With TypeScript",id:"React Native Starters/React Native With TypeScript",isDocsHomePage:!1,title:"React Native with TypeScript",description:"Now that we know what TypeScript is, we can start looking at how to use it in our React Native applications.",source:"@site/docs/React Native Starters/React Native With TypeScript.md",sourceDirName:"React Native Starters",slug:"/React Native Starters/React Native With TypeScript",permalink:"/docs/React Native Starters/React Native With TypeScript",editUrl:"https://github.com/extension-technologies/extension-technologies.github.io/docs/React Native Starters/React Native With TypeScript.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"React Native Paper",permalink:"/docs/React Native Starters/React Native Paper"},next:{title:"Sqlite Database",permalink:"/docs/React Native Starters/Sqlite Database"}},d=[{value:"Building the base UI",id:"building-the-base-ui",children:[]},{value:"Header.tsx",id:"headertsx",children:[]},{value:"App.tsx",id:"apptsx",children:[]},{value:"AddItem.tsx",id:"additemtsx",children:[]},{value:"Listing out items",id:"listing-out-items",children:[]}],u=(o="Header",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)}),h={toc:d};function m(e){var t=e.components,o=(0,i.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},h,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"react-native-with-typescript"},"React Native with TypeScript"),(0,a.kt)("p",null,"Now that we know what TypeScript is, we can start looking at how to use it in our React Native applications."),(0,a.kt)("p",null,"In this tutorial, we\u2019re going to be building a shopping list application. This is a great way to see how TypeScript can improve your developer experience without things getting too complex."),(0,a.kt)("h2",{id:"building-the-base-ui"},"Building the base UI"),(0,a.kt)("p",null," Open the folder in your code editor and run the commands below (depending on your machine) to start the project:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"MacOS")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"}," npm run ios\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Windows/Linux")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"}," npm run android\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",null,"App.tsx")," component is the root component in our app. This component will contain other components we use in the app, and we\u2019ll get back to it in a bit. For now, let\u2019s create our first component."),(0,a.kt)("p",null,"Create a folder structure like ",(0,a.kt)("strong",null,"src/components")," in the root directory and create a ",(0,a.kt)("strong",null,"Header.tsx")," component in the components folder."),(0,a.kt)("p",null,"Do you notice that the files we\u2019re creating have a ",(0,a.kt)("strong",null,".tsx extension?")," That\u2019s because we\u2019re now building with TypeScript and we need to use the proper file extensions, otherwise we\u2019ll get errors in the regular .js files."),(0,a.kt)("h2",{id:"headertsx"},"Header.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"import React from 'react';\nimport {View, Text, StyleSheet} from 'react-native';\ninterface Props {\n  title: string;\n}\nconst Header: React.FC<Props> = ({title}) => {\n  return (\n    <View style={styles.header}>\n      <Text style={styles.headerText}>{title}</Text>\n    </View>\n  );\n};\nconst styles = StyleSheet.create({\n  header: {\n    paddingVertical: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: '#cfcfcf',\n    alignItems: 'center',\n  },\n  headerText: {\n    fontSize: 20,\n    fontWeight: '600',\n  },\n});\nexport default Header;\n")),(0,a.kt)("p",null,"If you\u2019re already familiar with React Native, ignore most of the code above; you\u2019ll know what we\u2019re trying to do here. However, I want to draw your attention to lines 3-6:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"interface Props {\n title: string;\n}\nconst Header: React.FC<Props> = ({title}) => { /* content here*/}\n")),(0,a.kt)("p",null,"Because we\u2019re using TypeScript, we are now able to define what our component should take in, how it should take it in, and how many to take."),(0,a.kt)("p",null,"In the first three lines, we declared an interface, which serves as the structure for the props object we\u2019d normally access in our component. However, this time we\u2019re specifying the props and their types using TypeScript."),(0,a.kt)("p",null,"The benefit of doing it this way is that we get better IntelliSense and some validation when we\u2019ll use the component ( e.g. when the title is not passed to the component, there\u2019s going to be an instant error)."),(0,a.kt)("p",null,"Back in the App.tsx component, replace the content with the code below:"),(0,a.kt)("h2",{id:"apptsx"},"App.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"import React from 'react';\nimport {SafeAreaView, StyleSheet, Text, View} from 'react-native';\nimport Header from './src/components/Header';\nconst App = () => {\n  return (\n    <SafeAreaView style={styles.container}>\n      <Header />\n    </SafeAreaView>\n  );\n};\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#e8e7e3',\n  },\n});\nexport default App;\n")),(0,a.kt)("p",null,"You should notice a red line under the ",(0,a.kt)(u,{mdxType:"Header"})," component. If you hover over it, you should see a message that the component expects a title prop that was not supplied. Let\u2019s do that now."),(0,a.kt)("p",null,"Replace that line with the code snippet below and you should see that the error is gone:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'<Header title="Shopping List" />\n')),(0,a.kt)("p",null,"If you tried to assign a number (or any other data type that isn\u2019t a string) you\u2019ll get a different error. This is TypeScript trying to help you catch bugs before they happen."),(0,a.kt)("h2",{id:"additemtsx"},"AddItem.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"import React, {useState} from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  StyleSheet,\n} from 'react-native';\nexport interface IItem {\n  item: string;\n  quantity: string;\n}\nconst AddItem = () => {\n  const [item, setItem] = useState('');\n  const [quantity, setQuantity] = useState('');\n  return (\n    <View>\n      <Text style={styles.heading}>Add Shopping Item</Text>\n      <View style={styles.form}>\n        <TextInput\n          style={styles.input}\n          placeholder=\"Enter item\"\n          value={item}\n          onChangeText={text => setItem(text)}\n        />\n        <TextInput\n          style={styles.input}\n          placeholder=\"Enter quantity\"\n          keyboardType=\"numeric\"\n          value={quantity}\n          onChangeText={q => {\n            setQuantity(q);\n          }}\n        />\n        <TouchableOpacity style={styles.addItemButton} onPress={() => {}}>\n          <Text style={styles.buttonText}>Add Item</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\nconst styles = StyleSheet.create({\n  heading: {\n    fontSize: 20,\n    fontWeight: '700',\n  },\n  form: {\n    marginTop: 30,\n  },\n  input: {\n    padding: 15,\n    borderColor: 'rgba(0, 0, 0, 0.2)',\n    borderWidth: 1,\n    borderRadius: 5,\n    marginBottom: 20,\n  },\n  addItemButton: {\n    backgroundColor: '#eb8634',\n    paddingVertical: 20,\n    borderRadius: 5,\n    alignItems: 'center',\n  },\n  buttonText: {color: '#fff', fontWeight: '500'},\n});\nexport default AddItem;\n")),(0,a.kt)("p",null,"Notice the named export IItem on line 9? That\u2019s the structure of an item in our shopping list, and we export it because we\u2019ll be needing it in other components."),(0,a.kt)("p",null,"Back to App.tsx, update the component with the code below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"import React, {useState} from 'react';\nimport {SafeAreaView, StyleSheet, Text, View} from 'react-native';\nimport Header from './src/components/Header';\nimport AddItem, {IItem} from './src/components/AddItem'; /* import AddItem and interface*/\nconst App = () => {\n  const [shoppingList, setShoppingList] = useState<IItem[]>([]); // set the type of what the hook expects to be an array of IItems.\n  return (\n    <SafeAreaView style={styles.container}>\n      <Header title=\"Shopping List\" />\n      <View style={styles.contentWrapper}>\n        <AddItem\n          setShoppingList={setShoppingList}\n          shoppingList={shoppingList}\n        />\n      </View>\n    </SafeAreaView>\n  );\n};\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#e8e7e3',\n  },\n  contentWrapper: {\n    padding: 20,\n  },\n});\nexport default App;\n")),(0,a.kt)("p",null,"Now in App.tsx we imported the new AddItem component and the IItem interface so we can use (on line 6) the useState hook to create the shoppingList state."),(0,a.kt)("p",null,"We specified that the hook should accept an array of IItem when using the setShoppingList function. If you hover on the setShoppingList function, you\u2019ll see the type. Take note of it, we\u2019ll be needing it soon when we add items to the shopping list in AddItem.tsx."),(0,a.kt)("p",null,"Go back to the AddItem.tsx component and update it with this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"import React, {useState} from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  StyleSheet,\n  Alert,\n} from 'react-native';\nexport interface IItem {\n  item: string;\n  quantity: string;\n}\ninterface Props {\n  setShoppingList: React.Dispatch<React.SetStateAction<IItem[]>>;\n  shoppingList: IItem[];\n}\nconst AddItem: React.FC<Props> = ({shoppingList, setShoppingList}) => {\n  const [item, setItem] = useState('');\n  const [quantity, setQuantity] = useState('');\n  const addItem = () => {\n    if (!item) {\n      Alert.alert('No Item!', 'You need to enter an item');\n    } else {\n      setShoppingList([\n        ...shoppingList,\n        {\n          item,\n          quantity: quantity || '1',\n        },\n      ]);\n      setItem('');\n      setQuantity('');\n    }\n  };\n  return (\n    <View>\n      <Text style={styles.heading}>Add Shopping Item</Text>\n      <View style={styles.form}>\n        <TextInput\n          style={styles.input}\n          placeholder=\"Enter item\"\n          value={item}\n          onChangeText={text => setItem(text)}\n        />\n        <TextInput\n          style={styles.input}\n          placeholder=\"Enter quantity\"\n          keyboardType=\"numeric\"\n          value={quantity}\n          onChangeText={q => {\n            setQuantity(q);\n          }}\n        />\n        <TouchableOpacity style={styles.addItemButton} onPress={addItem}>\n          <Text style={styles.buttonText}>Add Item</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\nconst styles = StyleSheet.create({\n  heading: {\n    fontSize: 20,\n    fontWeight: '700',\n  },\n  form: {\n    marginTop: 30,\n  },\n  input: {\n    padding: 15,\n    borderColor: 'rgba(0, 0, 0, 0.2)',\n    borderWidth: 1,\n    borderRadius: 5,\n    marginBottom: 20,\n  },\n  addItemButton: {\n    backgroundColor: '#eb8634',\n    paddingVertical: 20,\n    borderRadius: 5,\n    alignItems: 'center',\n  },\n  buttonText: {color: '#fff', fontWeight: '500'},\n});\nexport default AddItem;\n")),(0,a.kt)("p",null,"There are significant changes in the component now, so I\u2019ll walk you through them."),(0,a.kt)("p",null,"On line 14, we define the Props interface and set the type of each property, and then set it as the type of props in our functional component on line 18."),(0,a.kt)("p",null,"We also created a handler function on line 21, when the \u201cAdd Item\u201d button is clicked, the function checks if an item was entered in the field, then invokes the setShoppingList() function to add a new item to the list."),(0,a.kt)("h2",{id:"listing-out-items"},"Listing out items"),(0,a.kt)("p",null,"Now that we\u2019re able to add new items, let\u2019s create a component to list them out."),(0,a.kt)("p",null,"Create another file in /src/components named Item.tsx and paste the code below inside:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"import React from 'react';\nimport {View, Text, StyleSheet} from 'react-native';\nimport {IItem} from './AddItem';\nconst Item: React.FC<IItem> = ({item, quantity}) => {\n  return (\n    <View style={styles.item}>\n      <Text style={styles.itemName}>{item}</Text>\n      <Text style={styles.quantity}>x{quantity}</Text>\n    </View>\n  );\n};\nconst styles = StyleSheet.create({\n  item: {\n    padding: 20,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    borderBottomWidth: 1,\n    borderBottomColor: 'rgba(0, 0, 0, 0.2)',\n  },\n  itemName: {\n    fontWeight: '500',\n  },\n  quantity: {\n    padding: 6,\n    borderWidth: 1,\n    borderColor: 'rgba(0, 0, 0, 0.2)',\n    borderRadius: 10,\n    overflow: 'hidden',\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n  },\n});\nexport default Item;\n")),(0,a.kt)("p",null,"You probably get the hang of it already! The Item.tsx component accepts properties from IItem as props, and then we render them with some styling."),(0,a.kt)("p",null,"Now we need to finish up the app by importing the component into App.tsx and listing the items using the built-in ",(0,a.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/flatlist"},"FlatList")," component."),(0,a.kt)("p",null,"Replace the content of the App.tsx with the code below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"import React, {useState} from 'react';\nimport {SafeAreaView, StyleSheet, View, FlatList} from 'react-native';\nimport Header from './src/components/Header';\nimport AddItem, {IItem} from './src/components/AddItem';\nimport Item from './src/components/Item';\nconst App = () => {\n  const [shoppingList, setShoppingList] = useState<IItem[]>([]);\n  return (\n    <SafeAreaView style={styles.container}>\n      <Header title=\"Shopping List\" />\n      <View style={styles.contentWrapper}>\n        <AddItem\n          setShoppingList={setShoppingList}\n          shoppingList={shoppingList}\n        />\n        <FlatList\n          data={shoppingList}\n          keyExtractor={(item, index) => `${item.item}-${index}`}\n          renderItem={({item}) => (\n            <Item item={item.item} quantity={item.quantity} />\n          )}\n        />\n      </View>\n    </SafeAreaView>\n  );\n };\n const styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#e8e7e3',\n  },\n  contentWrapper: {\n    padding: 20,\n  },\n });\n export default App;\n")),(0,a.kt)("p",null," Our app is now complete. On line 16, we use the FlatList component to render items from our list, and you can see how we use the Item component in the renderItem prop for FlatList."),(0,a.kt)("p",null,"Here\u2019s a demo of our new app:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Alt Text",src:n(8269).Z})))}m.isMDXComponent=!0},8269:function(e,t,n){t.Z=n.p+"assets/images/app-3af79cab54b4efb858df532620581cbe.png"}}]);